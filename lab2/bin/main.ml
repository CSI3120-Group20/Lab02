type job = {
  duration : int;
  start_time : int;
  priority : int;
}

let time_to_minutes hrs mins = 
  (int_of_string mins) +   (int_of_string hrs)*60

let ask_information job_num = 
  Printf.printf "For job %d, please enter the following details:\nStart Time (hours): " job_num;
  let start_time_hrs = input_line stdin in   (* Code based off of an example program generated by ChatGPT using input_line, as the example in OCaml documentation did not include this *)
  
  Printf.printf "Start Time (minutes): ";
  let start_time_mins = input_line stdin in

  Printf.printf "Duration (minutes): ";
  let duration = input_line stdin in
  
  Printf.printf "Priority: ";
  let priority = input_line stdin in

  { duration = (int_of_string duration); start_time = (time_to_minutes start_time_hrs start_time_mins); priority = (int_of_string priority) }

let read_jobs num_jobs =
  let list_jobs = ref [] in
  for job_num = 0 to num_jobs do
    list_jobs := !list_jobs @ [ask_information job_num]
  done;
   !list_jobs
  (* Syntax for this function was corrected by ChatGPT, allowing use of a ref object properly *)


(*Auxiliary function for sorting jobs by starttimes*)
let sort_by_start_time jobs = 
  List.sort (fun j1 j2 -> (compare j1.start_time j2.start_time)) jobs;;

(*Schedule jobs*)
let schedule_jobs jobs=   
  let sorted = sort_by_start_time jobs in (*The let ... in expression of defining the scope of a variable is explained by chatGPT*)
  let rec overlap scheduled remaining = 
    match remaining with
    | [] -> scheduled
    | job::tail ->
        match scheduled with
        | [] -> overlap [job] tail
        | last_job :: _ ->
          if job.start_time >= (last_job.start_time + last_job.duration) then
            overlap(job::scheduled) tail
          else
            overlap scheduled tail in
    List.rev (overlap[]sorted)


(*Main method down here: *)

(* Printf.printf "How many jobs do you want to schedule? "; *)


